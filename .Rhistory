absent_species <- which(colSums(Spp) == 0)
# Remove absent species
Spp_filtered <- Spp[, -absent_species]
# Perform Indicator Species Analysis
indicator_results <- indval(Spp_filtered, Treat$Treatment)
# Extract data frames
indval_df <- indicator_results$indval
species_names <- rownames(indval_df)
# Combine data into a single data frame
combined_df <- data.frame(
Species = species_names,
Indicator_Value_C = indval_df$C,
Indicator_Value_BH = indval_df$BH,
Indicator_Value_BM = indval_df$BM,
Indicator_Value_LH = indval_df$LH,
Indicator_Value_LM = indval_df$LM,
Indicator_Value_W = indval_df$W,
Max_Class = indicator_results$maxcls,
Indicator_Class = indicator_results$indcls,
P_Value = indicator_results$pval
)
# Filter for significant species (p < 0.05)
significant_species <- combined_df[combined_df$P_Value < 0.05, ]
# Add rank column based on indicator value in the max class
significant_species$Rank <-
ave(significant_species$Max_Class,
significant_species$Max_Class, FUN = rank)
# Save the combined data frame to CSV
write.csv(
significant_species,
file = "Figures/indicator_species_analysis_results_23.csv",
row.names = TRUE)
################################################################################
####################Similarity Percentages (SIMPER)#############################
################################################################################
simper_result <- simper(Spp, Treat$Treatment)
simper_summary <- summary(simper_result)
# Extract the first pairwise comparison (adjust as needed)
simper_result <- simper(Spp, Treat$Treatment, permutations = 99)
simper_summary <- summary(simper_result)
simper_summary
# Extract the first pairwise comparison (adjust as needed)
pairwise_data <- simper_result[[1]]
# Create the data frame with p-values
table_data <- data.frame(
Species = names(pairwise_data$average),
Contribution = pairwise_data$average,
SD = pairwise_data$sd,
P_value = pairwise_data$p,
Cumulative_Contribution = pairwise_data$cusum
)
# Sort by contribution
table_data <-
table_data[order(table_data$Contribution, decreasing = TRUE), ]
# Add rank column
table_data$Rank <- seq_len(nrow(table_data))
head(table_data)
write.csv(
table_data,
file = "Figures/SIMPER_23.csv",
row.names = TRUE)
################################################################################
#############################NMDS Graphs########################################
################################################################################
# NMDS Graphs
NMDS_graph_23 =
ggplot() +
geom_point(data = NMDS, aes(x = MDS.MDS1, y = MDS.MDS2,
fill = Treatment),alpha = 0.7, size = 5,
shape = 21) +
scale_color_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
scale_fill_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
annotate("text", x = -1, y = 1,
label = paste0("Stress: ", format(MDS$stress, digits = 2)),
hjust = 0, size = 8) +
ggtitle("2023") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, color="black",
size=25, face="bold"),
axis.title.x = element_text(size=25, face="bold", colour = "black"),
axis.title.y = element_text(size=25, face="bold", colour = "black"),
axis.text.x=element_text(size=25, face = "bold", color = "black"),
axis.text.y=element_text(size=25, face = "bold", color = "black"),
legend.text=element_text(size=25, face = "bold", color = "black"),
legend.title=element_text(size=25, face = "bold", color = "black"),
legend.position="bottom") +
guides(fill = guide_legend(nrow = 1)) +  # Adjust the number of rows to control orientation
labs(x = "MDS1", y = "MDS2", color = "",
fill = "")
NMDS_graph_23
NMDS_Spp_graph_23 =
ggplot() +
geom_text_repel(data = species.scores, aes(x = MDS1, y = MDS2),
label = species.scores$species, colour = "black",
size = 5, fontface = "bold") +
annotate("text", label = paste0("Stress: ", format(MDS$stress, digits = 2)),
hjust = 0, size = 8) +
ylim(-0.25, 0.50) +
ggtitle("2023") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, color="black",
size=25, face="bold"),
axis.title.x = element_text(size=25, face="bold", colour = "black"),
axis.text.x = element_text(size=25, face = "bold", color = "black"),
axis.text.y = element_text(size=25, face = "bold", color = "black"),
axis.title.y = element_blank(),
legend.text = element_text(size=25, face = "bold", color = "black"),
legend.title = element_text(size=25, face = "bold", color = "black"),
legend.position = "bottom") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "MDS1", y = "MDS2", color = "",
fill = "")
NMDS_Spp_graph_23
# Perform adonis to test the significance of treatments#
adon.results <- adonis2(Veg_Spp ~ Treatment, data = NMDS, method="bray",
permutations = 999)
print(adon.results)
write.csv.tabular(adon.results, "Figures/adonis_23.csv")
pairwise.adonis_23<-pairwise.adonis2(Veg_Spp ~ Treatment, data = NMDS)
pairwise.adonis_23
#save tables
# Create a new workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "All_Tables")
# Initialize starting row
start_row <- 1
# Loop through the list of tables and add each to the same sheet
for (name in names(pairwise.adonis_23)) {
# Add table name as a header
writeData(wb, sheet = "All_Tables", x = name,
startRow = start_row, colNames = FALSE)
# Increment the starting row to leave a gap between the header and the table
start_row <- start_row + 1
# Check if the element is a data frame or a character string
if (is.data.frame(pairwise.adonis_23[[name]])) {
# Write the table
writeData(wb, sheet = "All_Tables", x = pairwise.adonis_23[[name]],
startRow = start_row)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + nrow(pairwise.adonis_23[[name]]) + 2
} else if (is.character(pairwise.adonis_23[[name]])) {
# Write the character string
writeData(wb, sheet = "All_Tables", x = pairwise.adonis_23[[name]], startRow = start_row, colNames = FALSE)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + 2
}
}
# Save the workbook to an Excel file
saveWorkbook(wb, "Figures/pairwise_adonis_23_same_sheet.xlsx", overwrite = TRUE)
# Perform adonis to test the significance of treatments#
adon.results <- adonis2(Spp ~ NMDS$Treatment, method="bray",perm=999)
print(adon.results)
pairwise.adonis<-pairwise.adonis2(Spp ~ Treatment, data = NMDS)
pairwise.adonis %>% as.data.frame() %>% write.csv(file = "Figures/adonis_2023.csv")
################## Save Figures Above using ggarrange ##########################
NMDS_23_Combine = ggarrange(NMDS_graph_23, NMDS_Spp_graph_23,
ncol = 2, nrow = 1, common.legend = TRUE,
legend = "bottom",
legend.grob = get_legend(NMDS_graph_23))  # Extract legend from NMDS_graph_23
NMDS_23_Combine
ggsave("Figures/NMDS_23_Combine.png",
width = 14, height = 8)
################## Save Figures Above using ggarrange ##########################
NMDS_Combine = ggarrange(NMDS_graph_22, NMDS_Spp_graph_22,
NMDS_graph_23, NMDS_Spp_graph_23,
ncol = 2, nrow = 2, common.legend = TRUE,
legend = "bottom",
legend.grob = get_legend(NMDS_graph_23))  # Extract legend from NMDS_graph_23
NMDS_Combine
ggsave("Figures/NMDS_Combine.png",
width = 14, height = 16)
################################################################################
################################################################################
#########################   FNPS - Seed Mixture   ##############################
#########################       NonGrasses        ##############################
#########################  University of Florida  ##############################
#########################     Gage LaPierre       ##############################
#########################      2022 - 2023        ##############################
################################################################################
################################################################################
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "vegan", "agricolae", "extrafont", "plotrix",
"ggsignif", "multcompView", "ggpubr", "rstatix", "labdsv",
"tables", "openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################     Loads Packages     ##############################
library(tidyverse)
library(vegan)
library(labdsv)
library(agricolae)
library(extrafont)
library(ggsignif)
library(multcompView)
library(ggpubr)
library(plotrix)
library(rstatix)
library(tables)
library(openxlsx)
##########################     Read in  Data       #############################
Data = read.csv("Data/FNPS - Seed Mixture Project - 2021-2023.csv")
Data$Coverage = as.numeric(Data$Coverage)
# Reclasifys coverage data (CV) from 1-10 scale to percent scale #
Data <- mutate(Data, Coverage = case_when(
grepl(10, Coverage) ~ 97.5,
grepl(1, Coverage) ~ 0.1,
grepl(2, Coverage) ~ 0.5,
grepl(3, Coverage) ~ 1.5,
grepl(4, Coverage) ~ 3.5,
grepl(5, Coverage) ~ 7.5,
grepl(6, Coverage) ~ 17.5,
grepl(7, Coverage) ~ 37.5,
grepl(8, Coverage) ~ 62.5,
grepl(9, Coverage) ~ 85,
grepl(0, Coverage) ~ 0,
))
str(Data)
summary(Data)
Data$YID <- paste(Data$Year,Data$ID)
Data$ID_ <- paste(Data$Treatment, Data$ID)
# Orders years and treatments so that they display in same sequence in graphs #
Data$Year = factor(Data$Year, levels=c('1','2'))
Data$Treatment = factor(Data$Treatment, levels=c('BH', 'BM', 'LH', 'LM', 'W', "C"))
#Renames values in Treatment treatments for heat map later #
#Data$Treatment <- recode(Data$Treatment,
#                    C ="Control", W = "Wiregrass", BH = "Broomsedge High",
#                    BM = "Broomsedge Medium", LH = "Lovegrass High",
#                    LM = "Lovegrass Medium")
#################### Species abundances ########################################
# Creates and joins  data year 22 & 23 to make long data format #
Two_Abundance <- Data[which(Data$Year == "1"),]
Three_Abundance <- Data[which(Data$Year == "2"),]
Abundance_w <- full_join(Two_Abundance, Three_Abundance,
by = c('ID_', "Treatment", 'Species'))
Abundance_w = arrange(Abundance_w, Treatment)
# Turns NA values into zeros #
Abundance_w$Coverage.x <- ifelse(is.na(Abundance_w$Coverage.x), 0,
Abundance_w$Coverage.x)
Abundance_w$Coverage.y <- ifelse(is.na(Abundance_w$Coverage.y), 0,
Abundance_w$Coverage.y)
# Change abundance to reflect percentage change from (Year 1) to (Year 2)  #
Change_Abundance <- Abundance_w %>%
dplyr::select(ID_, Treatment, Species,
Coverage.x, Coverage.y) %>%
group_by(ID_, Treatment, Species) %>%
mutate(Change_abundance = Coverage.y - Coverage.x)
##################################  COVER CAHNGES ##############################
PN =
Change_Abundance[which(Change_Abundance$Species == "Paspalum notatum"),]
PN<-as.data.frame(PN)
PN$Treatment<-factor(PN$Treatment)
# Check Assumptions #
model  <- lm(Change_abundance ~ Treatment, data = PN)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Test for Significance #
anova_PN = PN %>% anova_test(Change_abundance ~ Treatment) %>%
add_significance()
anova_PN
lm(formula = Change_abundance ~ Treatment, PN)
tukey_PN <- PN %>%
tukey_hsd(Change_abundance ~ Treatment) %>%
add_significance() %>%
add_xy_position()
tukey_PN
tmp <- tabular(Treatment ~ Change_abundance* (mean+sd+std.error), data=PN)
tmp
write.csv.tabular(tmp, "Figures/PN_Change.csv")
PN_change_Box =
ggplot(PN, aes(x = Treatment, y = Change_abundance), colour = Treatment) +
geom_boxplot(aes(fill=Treatment), alpha = 0.5, outlier.shape = NA) +
geom_point(aes(fill=Treatment), size = 3,
position = position_jitterdodge(), alpha = 0.7) +
stat_pvalue_manual(tukey_PN,size = 8, bracket.size = 1, hide.ns = T)+
labs(subtitle = get_test_label(anova_PN, detailed = TRUE),
caption = get_pwc_label(tukey_PN)) +
scale_color_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
scale_fill_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=16),
axis.title.x = element_text(size=15, face="bold", colour = "black"),
axis.title.y = element_text(size=15, face="bold", colour = "black"),
axis.text.x=element_text(size=15, face = "bold", color = "black"),
axis.text.y=element_text(size=15, face = "bold", color = "black"),
strip.text.x =
element_text(size = 15, colour = "black", face = "bold"),
legend.position = "none") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "", y = "Change in Coverage", title = "Paspalum notatum")
PN_change_Box
################################################################################
########################### Cynodon dactylon ###################################
################################################################################
CD =
Change_Abundance[which(Change_Abundance$Species == "Cynodon dactylon"),]
CD<-as.data.frame(CD)
CD$Treatment<-factor(CD$Treatment)
# Check Assumptions #
model  <- lm(Change_abundance ~ Treatment, data = CD)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Test for Significance #
anova_CD = CD %>% anova_test(Change_abundance ~ Treatment) %>%
add_significance()
summary(anova_CD)
tukey_CD <- CD %>%
tukey_hsd(Change_abundance ~ Treatment) %>%
add_significance() %>%
add_xy_position()
tukey_CD
tmp <- tabular(Treatment ~ Change_abundance* (mean+sd+std.error), data=CD )
tmp
write.csv.tabular(tmp, "Figures/CD_Change.csv")
CD_change_Box =
ggplot(CD, aes(x = Treatment, y = Change_abundance), colour = Treatment) +
geom_boxplot(aes(fill=Treatment), alpha = 0.5, outlier.shape = NA) +
geom_point(aes(fill=Treatment), size = 3,
position = position_jitterdodge(), alpha = 0.7) +
stat_pvalue_manual(tukey_CD,size = 8, bracket.size = 1, hide.ns = T)+
labs(subtitle = get_test_label(anova_CD, detailed = TRUE),
caption = get_pwc_label(tukey_CD)) +
scale_color_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
scale_fill_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=16),
axis.title.x = element_text(size=15, face="bold", colour = "black"),
axis.title.y = element_text(size=15, face="bold", colour = "black"),
axis.text.x=element_text(size=15, face = "bold", color = "black"),
axis.text.y=element_text(size=15, face = "bold", color = "black"),
strip.text.x =
element_text(size = 15, colour = "black", face = "bold"),
legend.position = "none") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "", y = "Change in Coverage", title = "Cynodon dactylon")
CD_change_Box
################## Save Figures Above using ggarrange ##########################
Change =
ggarrange(PN_change_Box, CD_change_Box, ncol = 2, nrow = 1)
annotate_figure(Change, top = text_grob("", color = "black",
face = "bold", size = 25))
ggsave("Figures/Change_NonGrass.png",
width = 12, height = 8)
##################################  COVER CAHNGES ##############################
PN =
Change_Abundance[which(Change_Abundance$Species == "Paspalum notatum"),]
PN<-as.data.frame(PN)
PN$Treatment<-factor(PN$Treatment)
# Check Assumptions #
model  <- lm(Change_abundance ~ Treatment, data = PN)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Test for Significance #
anova_PN = PN %>% anova_test(Change_abundance ~ Treatment) %>%
add_significance()
anova_PN
lm(formula = Change_abundance ~ Treatment, PN)
tukey_PN <- PN %>%
tukey_hsd(Change_abundance ~ Treatment) %>%
add_significance() %>%
add_xy_position()
# Test for Significance #
anova_PN = PN %>% kruskal_test(Change_abundance ~ Treatment) %>%
add_significance()
anova_PN
lm(formula = Change_abundance ~ Treatment, PN)
tukey_PN <- PN %>%
dunn_test(Change_abundance ~ Treatment) %>%
add_significance() %>%
add_xy_position()
tukey_PN
tmp <- tabular(Treatment ~ Change_abundance* (mean+sd+std.error), data=PN)
tmp
write.csv.tabular(tmp, "Figures/PN_Change.csv")
PN_change_Box =
ggplot(PN, aes(x = Treatment, y = Change_abundance), colour = Treatment) +
geom_boxplot(aes(fill=Treatment), alpha = 0.5, outlier.shape = NA) +
geom_point(aes(fill=Treatment), size = 3,
position = position_jitterdodge(), alpha = 0.7) +
stat_pvalue_manual(tukey_PN,size = 8, bracket.size = 1, hide.ns = T)+
labs(subtitle = get_test_label(anova_PN, detailed = TRUE),
caption = get_pwc_label(tukey_PN)) +
scale_color_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
scale_fill_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=16),
axis.title.x = element_text(size=15, face="bold", colour = "black"),
axis.title.y = element_text(size=15, face="bold", colour = "black"),
axis.text.x=element_text(size=15, face = "bold", color = "black"),
axis.text.y=element_text(size=15, face = "bold", color = "black"),
strip.text.x =
element_text(size = 15, colour = "black", face = "bold"),
legend.position = "none") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "", y = "Change in Coverage", title = "Paspalum notatum")
PN_change_Box
################################################################################
########################### Cynodon dactylon ###################################
################################################################################
CD =
Change_Abundance[which(Change_Abundance$Species == "Cynodon dactylon"),]
CD<-as.data.frame(CD)
CD$Treatment<-factor(CD$Treatment)
# Check Assumptions #
model  <- lm(Change_abundance ~ Treatment, data = CD)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Test for Significance #
anova_CD = CD %>% anova_test(Change_abundance ~ Treatment) %>%
add_significance()
summary(anova_CD)
tukey_CD <- CD %>%
tukey_hsd(Change_abundance ~ Treatment) %>%
add_significance() %>%
add_xy_position()
tukey_CD
tmp <- tabular(Treatment ~ Change_abundance* (mean+sd+std.error), data=CD )
tmp
write.csv.tabular(tmp, "Figures/CD_Change.csv")
CD_change_Box =
ggplot(CD, aes(x = Treatment, y = Change_abundance), colour = Treatment) +
geom_boxplot(aes(fill=Treatment), alpha = 0.5, outlier.shape = NA) +
geom_point(aes(fill=Treatment), size = 3,
position = position_jitterdodge(), alpha = 0.7) +
stat_pvalue_manual(tukey_CD,size = 8, bracket.size = 1, hide.ns = T)+
labs(subtitle = get_test_label(anova_CD, detailed = TRUE),
caption = get_pwc_label(tukey_CD)) +
scale_color_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
scale_fill_manual(labels=c('BH', 'BM', 'LH', 'LM', 'W', "C"),
values=c("#663333", "#FF9966", "#006600",
"#99FF99", "#CC0000", "#330099")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=16),
axis.title.x = element_text(size=15, face="bold", colour = "black"),
axis.title.y = element_text(size=15, face="bold", colour = "black"),
axis.text.x=element_text(size=15, face = "bold", color = "black"),
axis.text.y=element_text(size=15, face = "bold", color = "black"),
strip.text.x =
element_text(size = 15, colour = "black", face = "bold"),
legend.position = "none") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "", y = "Change in Coverage", title = "Cynodon dactylon")
CD_change_Box
################## Save Figures Above using ggarrange ##########################
Change =
ggarrange(PN_change_Box, CD_change_Box, ncol = 2, nrow = 1)
annotate_figure(Change, top = text_grob("", color = "black",
face = "bold", size = 25))
ggsave("Figures/Change_NonGrass.png",
width = 12, height = 8)
